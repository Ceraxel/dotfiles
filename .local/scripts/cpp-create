#!/usr/bin/env zsh

printf "Directory\t: "
read DIR

if [ ! -d "$HOME/$DIR" ]; then
    echo "Directory does not exist."
    exit 1
fi

printf "Project name\t: "
read NAME

if [ -d "$HOME/$DIR/$NAME" ]; then
    echo "Project already exists."
    exit 1
fi

printf "CXX Standard\t: "
read CXX

printf "Files\t\t: "
IFS=' ' read -r -A filenames_array

printf "Git init? (y/n)\t: "
read GITINIT

if [ ${#filenames_array[@]} -eq 0 ]; then
    echo "No filenames provided."
    exit 1
fi

mkdir $HOME/$DIR/$NAME
cd $HOME/$DIR/$NAME

# Generating CMakeLists.txt
cat > CMakeLists.txt <<EOT
cmake_minimum_required(VERSION 3.0.0)
set(CMAKE_CXX_STANDARD $CXX)
project($NAME VERSION 0.1.0)

# Add all provided files to the executable
file(GLOB_RECURSE SRC_FILES src/*.cpp)

add_executable(
    \${PROJECT_NAME} 
    \${SRC_FILES}
)

target_include_directories(
  \${PROJECT_NAME}
  PRIVATE src
  PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)

EOT

mkdir src
mkdir include
cd src

for file in "${filenames_array[@]}"; do
    # Parse directory structure, create directories if needed
    dir=$(dirname "$file")
    if [[ $file =~ \.hpp$ ]] then
        touch ../include/$file
        continue
    fi
    if [ "$dir" != "." ]; then
        mkdir -p "$dir"
        touch $dir/$(basename "$file")
    else
        touch $(basename "$file")
    fi
done

if [ "$GITINIT" = "y" ] || [ "$GITINIT" = "Y" ]; then
    cd ..
    git init
fi

exit 0
